/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import { useAnimations, useFBX, useGLTF } from "@react-three/drei";
import { useFrame, useGraph } from "@react-three/fiber";
import { useControls } from "leva";
import { useEffect, useMemo, useRef } from "react";
import * as THREE from "three";
import { SkeletonUtils } from 'three-stdlib'

export function Avatar(props) {
  const { animation, wireframe } = props;
  const { headFollow, cursorFollow } = useControls({
    headFollow: false,
    cursorFollow: false,
  });
  const group = useRef();

  const { animations: typingAnimation } = useFBX("animations/Typing.fbx");

  typingAnimation[0].name = "Typing";

  const { actions } = useAnimations(
    [typingAnimation[0]],
    group
  );

  useFrame((state) => {
    if (headFollow) {
      group.current.getObjectByName("Head").lookAt(state.camera.position);
    }
    if (cursorFollow) {
      const target = new THREE.Vector3(state.mouse.x, state.mouse.y, 1);
      group.current.getObjectByName("Spine2").lookAt(target);
    }
  });

  useEffect(() => {
    actions[animation].reset().fadeIn(0.5).play();
    return () => {
      actions[animation].reset().fadeOut(0.5);
    };
  }, [animation]);

  useEffect(() => {
    Object.values(materials).forEach((material) => {
      material.wireframe = wireframe;
    });
  }, [wireframe]);

  const { scene } = useGLTF('models/avatar.glb')
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)

  return (
    <group {...props} ref={group} dispose={null}>
      <group>
        <primitive object={nodes.Hips} />
        <skinnedMesh name="mesh_0" geometry={nodes.mesh_0.geometry} material={materials.Wolf3D_Avatar} skeleton={nodes.mesh_0.skeleton} morphTargetDictionary={nodes.mesh_0.morphTargetDictionary} morphTargetInfluences={nodes.mesh_0.morphTargetInfluences} position={[-0.541, -0.037, -0.172]} scale={1} />
        <skinnedMesh geometry={nodes.mesh_1.geometry} material={materials.Wolf3D_Avatar_Transparent} skeleton={nodes.mesh_1.skeleton} position={[-0.541, -0.037, -0.172]} scale={1} />
      </group>
    </group>
  )
}

useGLTF.preload("models/avatar.glb");
useFBX.preload("animations/Typing.fbx");
